// <auto-generated />
using System;
using DubaiEstate.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DubaiEstate.DAL.Migrations
{
    [DbContext(typeof(DubaiEstateLabContext))]
    [Migration("20250330144510_ForeignKeysAdded")]
    partial class ForeignKeysAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Cyrillic_General_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DubaiEstate.DAL.Models.Area", b =>
                {
                    b.Property<long>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("area_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AreaId"));

                    b.Property<string>("AreaNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("area_name_en");

                    b.HasKey("AreaId")
                        .HasName("PK_Area1");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.Date", b =>
                {
                    b.Property<DateOnly>("FullDate")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasColumnName("day");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("month");

                    b.Property<string>("MonthYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("month_year");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("FullDate")
                        .HasName("PK_Date12");

                    b.ToTable("Date", (string)null);
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.Procedure", b =>
                {
                    b.Property<long>("ProcedureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("procedure_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProcedureId"));

                    b.Property<string>("ProcedureNameEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("procedure_name_en");

                    b.Property<long>("TransGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("trans_group_id");

                    b.HasKey("ProcedureId")
                        .HasName("PK_Procedure1");

                    b.HasIndex("TransGroupId");

                    b.ToTable("Procedure", (string)null);
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.PropertySubType", b =>
                {
                    b.Property<long>("PropertySubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("property_sub_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PropertySubTypeId"));

                    b.Property<string>("PropertySubTypeEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("property_sub_type_en");

                    b.Property<long>("PropertyTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_type_id");

                    b.HasKey("PropertySubTypeId")
                        .HasName("PK_PropertySubType1");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("PropertySubType", (string)null);
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.PropertyType", b =>
                {
                    b.Property<long>("PropertyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("property_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PropertyTypeId"));

                    b.Property<string>("PropertyTypeEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("property_type_en");

                    b.HasKey("PropertyTypeId")
                        .HasName("PK_PropertyType1");

                    b.ToTable("PropertyType", (string)null);
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.Transaction", b =>
                {
                    b.Property<int?>("ActualWorth")
                        .HasColumnType("int")
                        .HasColumnName("actual_worth");

                    b.Property<long>("AreaId")
                        .HasColumnType("bigint")
                        .HasColumnName("area_id");

                    b.Property<DateOnly>("InstanceDate")
                        .HasColumnType("date")
                        .HasColumnName("instance_date");

                    b.Property<double>("ProcedureArea")
                        .HasColumnType("float")
                        .HasColumnName("procedure_area");

                    b.Property<long>("ProcedureId")
                        .HasColumnType("bigint")
                        .HasColumnName("procedure_id");

                    b.Property<long>("PropertySubTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("property_sub_type_id");

                    b.Property<int?>("RentValue")
                        .HasColumnType("int")
                        .HasColumnName("rent_value");

                    b.HasIndex("AreaId");

                    b.HasIndex("InstanceDate");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("PropertySubTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.TransactionsGroup", b =>
                {
                    b.Property<long>("TransGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("trans_group_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransGroupId"));

                    b.Property<string>("TransGroupEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("trans_group_en");

                    b.HasKey("TransGroupId")
                        .HasName("PK_TransactionsGroup1");

                    b.ToTable("TransactionsGroup", (string)null);
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.Procedure", b =>
                {
                    b.HasOne("DubaiEstate.DAL.Models.TransactionsGroup", "TransGroup")
                        .WithMany("Procedures")
                        .HasForeignKey("TransGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Procedure1_TransactionsGroup1");

                    b.Navigation("TransGroup");
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.PropertySubType", b =>
                {
                    b.HasOne("DubaiEstate.DAL.Models.PropertyType", "PropertyType")
                        .WithMany("PropertySubTypes")
                        .HasForeignKey("PropertyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_PropertySubType1_PropertyType1");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.Transaction", b =>
                {
                    b.HasOne("DubaiEstate.DAL.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .IsRequired();

                    b.HasOne("DubaiEstate.DAL.Models.Date", "InstanceDateNavigation")
                        .WithMany()
                        .HasForeignKey("InstanceDate")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_Date");

                    b.HasOne("DubaiEstate.DAL.Models.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId")
                        .IsRequired();

                    b.HasOne("DubaiEstate.DAL.Models.PropertySubType", "PropertySubType")
                        .WithMany()
                        .HasForeignKey("PropertySubTypeId")
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("InstanceDateNavigation");

                    b.Navigation("Procedure");

                    b.Navigation("PropertySubType");
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.PropertyType", b =>
                {
                    b.Navigation("PropertySubTypes");
                });

            modelBuilder.Entity("DubaiEstate.DAL.Models.TransactionsGroup", b =>
                {
                    b.Navigation("Procedures");
                });
#pragma warning restore 612, 618
        }
    }
}
